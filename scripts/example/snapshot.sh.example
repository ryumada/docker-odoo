#!/bin/bash

# Press ctrl + F then type enter to see the highlight of variables should be added

# enter the production database name this is required to backup the database
ODOO_DATABASE_NAME_PRD=enter_production_database_name
# you can leave as is to not backup your snapshot to Google Cloud Storage (GCS)
GCS_BUCKET_NAME=enter_your_gcs_bucket_name

PATH_TO_ODOO=$(git -C "$(dirname "$(readlink -f "$0")")" rev-parse --show-toplevel)
SERVICE_NAME=$(basename "$PATH_TO_ODOO")

## This variable below to define the new variable (DON'T EDIT)
FILES_DIRS_TO_TAR=""

## Add Directory (ADD MORE VARIABLE TO ADD NEW DIRECTORY for the archive by uncomment this line and add the path of the directory.)
# FILES_DIRS_TO_TAR="enter_path_to_directory $FILES_DIRS_TO_TAR"
# FILES_DIRS_TO_TAR="enter_path_to_directory $FILES_DIRS_TO_TAR"

## Make sure that the git directory and odoo base directory has git_hashes.txt file.
## If not, you need to change this to the directory of odoo modules and odoo-base instead of git_hashes.txt. 
## enter the correct path
FILES_DIRS_TO_TAR="git/git_hashes.txt $FILES_DIRS_TO_TAR"
FILES_DIRS_TO_TAR="odoo-base/git_hashes.txt $FILES_DIRS_TO_TAR"

## Add the additional odoo module directory that don't use git (uncomment and add the path of the directory)
# FILES_DIRS_TO_TAR="git/enter_additional_git_odoo_module_directory $FILES_DIRS_TO_TAR"

## Make sure that the datadir location is correct (enter the correct one)
FILES_DIRS_TO_TAR="/var/lib/odoo/$SERVICE_NAME/filestore/$ODOO_DATABASE_NAME_PRD $FILES_DIRS_TO_TAR"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# DON'T change these codes below
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
function amIRoot() {
  if [ "$(id -u)" -ne 0 ]; then
    echo "$(getDate) üî¥ Please run this script as root or using sudo"
    exit 1
  fi
}

function areYouReallySure() {
  tar_file_path=$1
  if [ -f "$tar_file_path" ]; then
    echo "current snapshot file already exists, do you want to overwrite it?"
    echo -e "type 'yes I am sure' to continue.\n"

    read -rp ": " CONFIRMATION

    case $CONFIRMATION in
      "yes I am sure")
        echo "$(getDate) üîÑ Overwriting the current snapshot file."
        rm -f "$tar_file_path"
        ;;
      *)
        echo "$(getDate) üî¥ You're not sure, okay. Now exitting the script."
        exit 1
        ;;
    esac
  fi
}

function getDate() {
  echo "[$(date +"%Y-%m-%d %H:%M:%S")]"
}

amIRoot

# DATE_FOR_FILENAME="$(date +"%Y%m%d-%H%M%S")"
# DATE_FOR_MESSAGE=$(date +"%Y-%m-%d %H:%M:%S")
TAR_FILE_NAME=snapshot-$SERVICE_NAME.tar.zst
TAR_FILE_PATH=/tmp/$TAR_FILE_NAME

areYouReallySure "$TAR_FILE_PATH"

FILES_DIRS_TO_TAR=".secrets/db_user $FILES_DIRS_TO_TAR"
FILES_DIRS_TO_TAR=".secrets/db_password $FILES_DIRS_TO_TAR"
FILES_DIRS_TO_TAR="conf/odoo.conf $FILES_DIRS_TO_TAR"
FILES_DIRS_TO_TAR=".env $FILES_DIRS_TO_TAR"
FILES_DIRS_TO_TAR="requirements.txt $FILES_DIRS_TO_TAR"

FILES_DIRS_TO_TAR="/tmp/$ODOO_DATABASE_NAME_PRD.sql $FILES_DIRS_TO_TAR"
FILES_DIRS_TO_TAR="crontab $FILES_DIRS_TO_TAR"

FILES_DIRS_TO_TAR="/etc/nginx/sites-available $FILES_DIRS_TO_TAR"
FILES_DIRS_TO_TAR="/etc/logrotate.d/$SERVICE_NAME* $FILES_DIRS_TO_TAR"

if [ -f "/etc/logrotate.d/sudo-*" ]; then
  FILES_DIRS_TO_TAR="/etc/logrotate.d/sudo-* $FILES_DIRS_TO_TAR"
fi

if [ -f "scripts/backupdata-$SERVICE_NAME" ]; then
  FILES_DIRS_TO_TAR="scripts/backupdata-$SERVICE_NAME $FILES_DIRS_TO_TAR"
fi

if [ -f "scripts/databasecloner-$SERVICE_NAME" ]; then
  FILES_DIRS_TO_TAR="scripts/databasecloner-$SERVICE_NAME $FILES_DIRS_TO_TAR"
fi

if [ -f "scripts/snapshot-$SERVICE_NAME" ]; then
  FILES_DIRS_TO_TAR="scripts/snapshot-$SERVICE_NAME $FILES_DIRS_TO_TAR"
fi

if [ -f "/usr/local/sbin/sudo-*" ]; then
  FILES_DIRS_TO_TAR="/usr/local/sbin/sudo-* $FILES_DIRS_TO_TAR"
fi

TEMP_FILES_TO_REMOVE="/tmp/$ODOO_DATABASE_NAME_PRD.sql"
TEMP_FILES_TO_REMOVE="crontab $TEMP_FILES_TO_REMOVE"

LOG_PATH=/var/log/odoo/_utilities/snapshot-$SERVICE_NAME.log

# Redirect stdout and stderr to tee
exec > >(tee -a "$LOG_PATH") 2>&1

echo "-------------------------------------------------------------------------------"
echo " DAILY SNAPSHOT FOR $SERVICE_NAME @ $(date +"%A, %d %B %Y %H:%M %Z")"
echo "-------------------------------------------------------------------------------"

if ! command -v zstd >/dev/null 2>&1; then
  echo "üî¥ zstd is not installed. Please install zstd first."
  echo "For Ubuntu: sudo apt install zstd"
  echo "For CentOS: sudo yum install zstd"
  exit 1
fi

echo "$(getDate) Change WORKDIR to $PATH_TO_ODOO."
cd $PATH_TO_ODOO || { echo "üî¥ Can't change directory to $PATH_TO_ODOO"; exit 1; }

echo "$(getDate) Dumping $ODOO_DATABASE_NAME_PRD database..."
sudo -u postgres pg_dump -f /tmp/"$ODOO_DATABASE_NAME_PRD.sql" $ODOO_DATABASE_NAME_PRD > /dev/null 2>&1

echo "$(getDate) ‚è±Ô∏è Backing up cron jobs list..."
crontab -l > ./crontab

echo "$(getDate) üì¶ Backing up the database and its datadir..."
tar -cf $TAR_FILE_PATH -I "zstd -vT0 -7 --ultra" $FILES_DIRS_TO_TAR

echo "$(getDate) Changing the ownership of the snapshot file..."
chown odoo: $TAR_FILE_PATH

echo "$(getDate) üßπ Cleaning up the SQL file."
rm $TEMP_FILES_TO_REMOVE

if [ "$GCS_BUCKET_NAME" != "enter_your_gcs_bucket_name" ] && [ "$GCS_BUCKET_NAME" != "" ]; then
  echo "$(getDate) ‚òÅ Moving the snapshot file to tilabs-ctb-backup at Google Cloud Storage."
  $PRE_COMMAND gsutil -m mv $TAR_FILE_PATH gs://$GCS_BUCKET_NAME/$TAR_FILE_NAME
  echo -e "$(getDate) ‚úÖ The snapshot File Created Successfully named $TAR_FILE_NAME. File Backupped at gs://$GCS_BUCKET_NAME/$TAR_FILE_NAME."
else
  echo -e "$(getDate) ‚úÖ The snapshot File Created Successfully named $TAR_FILE_NAME. File Backupped at $TAR_FILE_PATH."
fi
echo
